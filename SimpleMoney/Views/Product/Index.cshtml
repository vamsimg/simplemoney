@model IEnumerable<SimpleMoney.Models.Product>

<script type="text/javascript" src="Scripts/jquery-1.7.1.js"></script>

@{
    ViewBag.Title = "Index";
}


@using (Html.BeginForm()) 
{
     @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Requirements</legend>           
                
        <div class="editor-label">
           Loan Amount
        </div>
        <div class="editor-field">
            @Html.TextBox("amount", new { @value = ViewBag.amount })
        </div>

        <div class="editor-label">
          How Long ?
        </div>
        <div class="editor-field">
             
             @Html.DropDownList("duration", new SelectList ( new Dictionary<string,string> 
					   { { "ongoing", "Ongoing" }, { "0.5", "6 months" }, { "1", "1 year" }, { "2", "2 years" }, { "3", "3 years" } , { "4", "4 years" } , { "5", "5 years" } },
                              "Key", "Value", @ViewBag.duration))

        </div>

         <div class="editor-label">
         Repayment Terms:
        </div>
        <div class="editor-field">
               <label for="principal" style="display:inline">Principal plus Interest</label>
               @Html.CheckBox("principal", (bool?)ViewBag.principal)
               
               <label for="interest" style="display:inline">Interest Only</label>
               @Html.CheckBox("interest", (bool?)ViewBag.interest)
        </div>

         <div class="editor-label">
         Security
        </div>
        <div class="editor-field">


               <label for="residential" style="display:inline">Residenital </label>
               @Html.CheckBox("residential", (bool?)ViewBag.residential)
               
               <label for="commercial" style="display:inline">Commercial</label>
               @Html.CheckBox("commercial", (bool?)ViewBag.commercial) 

              <label for="other" style="display:inline">Other</label>
               @Html.CheckBox("other", (bool?)ViewBag.other) 

             <label for="other" style="display:inline">None</label>
               @Html.CheckBox("noSecurity", (bool?)ViewBag.noSecurity) 
        </div>

           <div class="editor-label">
         All at once ?
        </div>

          <div class="editor-field">
               <label for="progress" style="display:inline">Progress</label>
               @Html.CheckBox("progress", (bool?)ViewBag.progress) 
          </div>
          
       
        
        <input type="submit" value="Next" name ="nextButton"/>
        
    </fieldset>
}


<h2>Index</h2>

<h2>Overdrafts</h2>

<table id="overdrafts">
<tbody>
    <tr>
        <td>
            Lender
        </td>
        <td>
            @Html.DisplayNameFor(model => model.Title)
        </td>       
        <td>
            @Html.DisplayNameFor(model => model.MinimumAmount)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.MaximumAmount)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.LoanAmountNotes)
        </td>
        
        <td>
            @Html.DisplayNameFor(model => model.InterestRate)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.SecurityNotes)
        </td>
       
        <td>
            @Html.DisplayNameFor(model => model.EstablishmentFeeNotes)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.MonthlyAccountKeepingFee)
        </td>      
        <td>
            @Html.DisplayNameFor(model => model.SecurityTypes)
        </td>       
    </tr>

@foreach (var item in Model.Where(p=>p.ProductCategory == SimpleMoney.Models.ProductCategory.Overdraft))
{
    <tr>
        <td>
            @item.Lender.Name
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Title)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.MinimumAmount)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MaximumAmount)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LoanAmountNotes)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.InterestRate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SecurityNotes)
        </td>
       
        <td>
            @Html.DisplayFor(modelItem => item.EstablishmentFeeNotes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MonthlyAccountKeepingFee)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.SecurityTypes)
        </td>       
    </tr>
}
     </tbody>
</table>

<h2>Line of Credit</h2>

<table id="lines">
<tbody>
    <tr>
        <td>
            Lender
        </td>
        <td>
            @Html.DisplayNameFor(model => model.Title)
        </td>       
        <td>
            @Html.DisplayNameFor(model => model.MinimumAmount)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.MaximumAmount)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.LoanAmountNotes)
        </td>
        
        <td>
            @Html.DisplayNameFor(model => model.InterestRate)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.SecurityNotes)
        </td>
       
        <td>
            @Html.DisplayNameFor(model => model.EstablishmentFeeNotes)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.MonthlyAccountKeepingFee)
        </td>      
        <td>
            @Html.DisplayNameFor(model => model.SecurityTypes)
        </td>      
    </tr>

@foreach (var item in Model.Where(p=>p.ProductCategory == SimpleMoney.Models.ProductCategory.LineOfCredit))
{
    <tr>
        <td>
            @item.Lender.Name
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Title)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.MinimumAmount)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MaximumAmount)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LoanAmountNotes)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.InterestRate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SecurityNotes)
        </td>
       
        <td>
            @Html.DisplayFor(modelItem => item.EstablishmentFeeNotes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MonthlyAccountKeepingFee)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.SecurityTypes)
        </td>           
    </tr>
}
     </tbody>
</table>

<h2>Term Loans</h2>

<table id="termloans">
<tbody>
    <tr>
        <td>
            Lender
        </td>
        <td>
            @Html.DisplayNameFor(model => model.Title)
        </td>       
        <td>
            @Html.DisplayNameFor(model => model.MinimumAmount)
        </td>
        <td>            
            @Html.DisplayNameFor(model => model.MaximumAmount)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.LoanAmountNotes)
        </td>
        
        <td>
            @Html.DisplayNameFor(model => model.InterestRate)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.SecurityNotes)
        </td>
       
        <td>
            @Html.DisplayNameFor(model => model.EstablishmentFeeNotes)
        </td>
        <td>
            @Html.DisplayNameFor(model => model.MonthlyAccountKeepingFee)
        </td>      
        <td>
            @Html.DisplayNameFor(model => model.SecurityTypes)
        </td>       
    </tr>

@foreach (var item in Model.Where(p=>p.ProductCategory == SimpleMoney.Models.ProductCategory.TermLoan))
{
    <tr>
        <td>
            @item.Lender.Name
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Title)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.MinimumAmount)
        </td>
        <td>
            @(item.MaximumAmount == 0 ? "None" : item.MaximumAmount.ToString())
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LoanAmountNotes)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.InterestRate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SecurityNotes)
        </td>
       
        <td>
            @Html.DisplayFor(modelItem => item.EstablishmentFeeNotes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MonthlyAccountKeepingFee)
        </td>       
        <td>
            @Html.DisplayFor(modelItem => item.SecurityTypes)
        </td>       
    </tr>
}
     </tbody>
</table>


<script type="text/javascript">
     function transposeTable(tableName)
     {
          var t = $('#' + tableName + ' tbody').eq(0);
          var r = t.find('tr');
          var cols = r.length;
          var rows = r.eq(0).find('td').length;
          var cell, next, tem, i = 0;
          var tb = $('<tbody></tbody>');

          while (i < rows) {
               cell = 0;
               tem = $('<tr></tr>');
               while (cell < cols) {
                    next = r.eq(cell++).find('td').eq(0);
                    tem.append(next);
               }
               tb.append(tem);
               ++i;
          }
          $('#' + tableName).append(tb);
          $('#' + tableName).show();
     } 

     $(function() {
          transposeTable('overdrafts');
          transposeTable('lines');
          transposeTable('termloans');
     })
</script>
